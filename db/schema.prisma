datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi", "referentialActions"]
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  tokens    Token[]
  sessions  Session[]
  decks     Deck[]
  responses Response[]
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model Session {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Deck {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  cards  Card[]
}

model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  front     String
  back      String

  deck      Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId    String
  responses Response[]
}

model Response {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  correctness Float

  User   User   @relation(fields: [userId], references: [id])
  userId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String
}
